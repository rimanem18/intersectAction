/**
 * author Rimane
 * license MIT
 * url https://github.com/rimanem18/intersectAction
 * 
 * @param {NodeList|HTMLCollection|HTMLElement|jQueryObject} elements 交差を監視したい要素
 * @param {Function} callback  交差時に実行したい関数
 * @param {IntersectionObserver Options} observerOptions IntersectionObserver のオプション
 */
function intersectAction(elements,callback,observerOptions){"use strict";const forEach=Array.prototype.forEach,toString=Object.prototype.toString;function typeOf(obj){return void 0!==window.jQuery&&obj instanceof jQuery?"jquery":toString.call(obj).slice(8,-1).toLowerCase()}const elementsType=typeOf(elements);void 0===observerOptions&&(observerOptions={root:null,rootMargin:"0px",threshold:0});const observer=new IntersectionObserver(doIntersect,observerOptions);if("jquery"===elementsType){const doms=elements.get();forEach.call(doms,(function(dom){observer.observe(dom)}))}else"nodelist"===elementsType||"htmlcollection"===elementsType?forEach.call(elements,(function(element){observer.observe(element)})):observer.observe(elements);function doIntersect(entries){"jquery"===elementsType?forEach.call(entries,(function(entry){callback(jQuery(entry.target),entry.isIntersecting)})):forEach.call(entries,(function(entry){callback(entry.target,entry.isIntersecting)}))}console.log(elementsType)}